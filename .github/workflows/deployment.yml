name: Deployment

on:
  push:
    branches: ["main"]
    paths:
      - src/**
      - schedules/**
      - Cargo.toml
      - Cargo.lock
      - Dockerfile
      - .github/workflows/deployment.yml
  workflow_run:
    workflows: ["Auto Approve"]
    types:
      - completed


env:
  DOCKER_TAG: ghcr.io/${{ github.repository }}:latest

jobs:
  build:
    runs-on: ubuntu-latest

    if: ${{ github.event_name == 'push' || github.event.workflow_run.conclusion == 'success' }}

    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v4

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          target: x86_64-unknown-linux-musl

      - uses: Swatinem/rust-cache@v2

      - uses: actions/cache@v3
        continue-on-error: false
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            cargo-

      - uses: ScribeMD/docker-cache@0.5.0
        with:
          key: docker-${{ runner.os }}-${{ hashFiles('**/Dockerfile') }}

      - run: |
          cross -V || cargo install cross --git https://github.com/cross-rs/cross
          cross build --release --target x86_64-unknown-linux-musl

      - uses: docker/setup-buildx-action@v3

      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ github.token }}

      - uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ env.DOCKER_TAG }}
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          password: ${{ secrets.SSH_PASSWORD }}
          script: |
            docker pull ${{ env.DOCKER_TAG }}
            docker stop simple_webhook_schedule || true
            docker rm simple_webhook_schedule || true
            docker run -d --name simple_webhook_schedule --restart on-failure --env-file ~/workspace/simple_webhook_schedule/.env ${{ env.DOCKER_TAG }}
